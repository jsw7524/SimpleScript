// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  PC200067
// DateTime: 2019/2/18 下午 03:37:43
// UserName: jsw7524
// Input file <SimpleScriptParser.y - 2019/2/18 下午 03:33:24>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using SimpleScript.RunTime;
using SimpleScript.RunTime.Statements;

namespace SimpleScript.Analyzing
{
public enum Tokens {error=2,EOF=3,COMMENT=4,IDENTIFIER=5,INTEGER_LITERAL=6,
    DOUBLE_LITERAL=7,BOOL_LITERAL=8,STRING_LITERAL=9,EOL=10,DIM=11,BOOL=12,
    INT=13,STRING=14,DOUBLE=15,AS=16,BEGIN=17,END=18,
    PRINT=19,INPUT=20,FOR=21,TO=22,NEXT=23,WHILE=24,
    DO=25,IF=26,THEN=27,ELSE=28,FI=29,OP_RIGHT_PAR=30,
    OP_LEFT_PAR=31,OP_ASSIGN=32,OP_ADD=33,OP_MINUS=34,OP_MUL=35,OP_DIV=36,
    OP_MODUL=37,OP_AND=38,OP_OR=39,OP_NOT=40,OP_EQU=41,OP_NOT_EQU=42,
    OP_LT=43,OP_GT=44,OP_GT_EQ=45,OP_LT_EQ=46,LeftBracket=47,RightBracket=48};

public struct ValueType
{
    public long Integer;
    public string String;
    public double Double;
	public bool Bool;
	public Expression expr;
	public StatementList statementList;
	public IStatement  statement;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleScriptParser.y - 2019/2/18 下午 03:33:24
	SymbolTable symTable = SymbolTable.GetInstance;
	public StatementList program = new StatementList();
  // End verbatim content from SimpleScriptParser.y - 2019/2/18 下午 03:33:24

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[58];
  private static State[] states = new State[120];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "statementList", "statement", "varDecl", "assignOp", 
      "printOp", "inputOp", "forLoop", "ifCond", "whileLoop", "Expr", "Literal", 
      "forBody", "ifBody", "else", "elseBody", "whileBody", };

  static Parser() {
    states[0] = new State(new int[]{17,3},new int[]{-1,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{10,4});
    states[4] = new State(new int[]{11,10,5,21,19,72,20,75,21,78,26,92,24,107,10,-3},new int[]{-3,5,-4,117,-5,9,-6,20,-7,71,-8,74,-9,77,-10,91,-11,106});
    states[5] = new State(new int[]{10,6});
    states[6] = new State(new int[]{18,7,11,10,5,21,19,72,20,75,21,78,26,92,24,107},new int[]{-4,8,-5,9,-6,20,-7,71,-8,74,-9,77,-10,91,-11,106});
    states[7] = new State(-2);
    states[8] = new State(-5);
    states[9] = new State(-6);
    states[10] = new State(new int[]{5,11});
    states[11] = new State(new int[]{16,12});
    states[12] = new State(new int[]{13,13,15,17,12,18,14,19});
    states[13] = new State(new int[]{47,14,10,-13});
    states[14] = new State(new int[]{6,15});
    states[15] = new State(new int[]{48,16});
    states[16] = new State(-17);
    states[17] = new State(-14);
    states[18] = new State(-15);
    states[19] = new State(-16);
    states[20] = new State(-7);
    states[21] = new State(new int[]{32,22,47,66});
    states[22] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,23,-13,55});
    states[23] = new State(new int[]{33,24,34,26,35,28,36,30,37,32,38,34,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50,10,-18});
    states[24] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,25,-13,55});
    states[25] = new State(new int[]{33,-24,34,-24,35,28,36,30,37,32,38,34,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50,10,-24,30,-24,22,-24});
    states[26] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,27,-13,55});
    states[27] = new State(new int[]{33,-25,34,-25,35,28,36,30,37,32,38,34,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50,10,-25,30,-25,22,-25});
    states[28] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,29,-13,55});
    states[29] = new State(new int[]{33,-27,34,-27,35,-27,36,-27,37,32,38,34,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50,10,-27,30,-27,22,-27});
    states[30] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,31,-13,55});
    states[31] = new State(new int[]{33,-28,34,-28,35,-28,36,-28,37,32,38,34,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50,10,-28,30,-28,22,-28});
    states[32] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,33,-13,55});
    states[33] = new State(new int[]{33,-29,34,-29,35,-29,36,-29,37,-29,38,34,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50,10,-29,30,-29,22,-29});
    states[34] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,35,-13,55});
    states[35] = new State(new int[]{33,-30,34,-30,35,-30,36,-30,37,-30,38,-30,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50,10,-30,30,-30,22,-30});
    states[36] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,37,-13,55});
    states[37] = new State(new int[]{33,-31,34,-31,35,-31,36,-31,37,-31,38,-31,39,-31,40,38,41,40,42,42,43,44,44,46,45,48,46,50,10,-31,30,-31,22,-31});
    states[38] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,39,-13,55});
    states[39] = new State(new int[]{33,-32,34,-32,35,-32,36,-32,37,-32,38,-32,39,-32,40,-32,41,40,42,42,43,44,44,46,45,48,46,50,10,-32,30,-32,22,-32});
    states[40] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,41,-13,55});
    states[41] = new State(new int[]{33,-33,34,-33,35,-33,36,-33,37,-33,38,-33,39,-33,40,-33,41,-33,42,42,43,44,44,46,45,48,46,50,10,-33,30,-33,22,-33});
    states[42] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,43,-13,55});
    states[43] = new State(new int[]{33,-34,34,-34,35,-34,36,-34,37,-34,38,-34,39,-34,40,-34,41,-34,42,-34,43,44,44,46,45,48,46,50,10,-34,30,-34,22,-34});
    states[44] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,45,-13,55});
    states[45] = new State(new int[]{33,-35,34,-35,35,-35,36,-35,37,-35,38,-35,39,-35,40,-35,41,-35,42,-35,43,-35,44,46,45,48,46,50,10,-35,30,-35,22,-35});
    states[46] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,47,-13,55});
    states[47] = new State(new int[]{33,-36,34,-36,35,-36,36,-36,37,-36,38,-36,39,-36,40,-36,41,-36,42,-36,43,-36,44,-36,45,48,46,50,10,-36,30,-36,22,-36});
    states[48] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,49,-13,55});
    states[49] = new State(new int[]{33,-37,34,-37,35,-37,36,-37,37,-37,38,-37,39,-37,40,-37,41,-37,42,-37,43,-37,44,-37,45,-37,46,50,10,-37,30,-37,22,-37});
    states[50] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,51,-13,55});
    states[51] = new State(-38);
    states[52] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,53,-13,55});
    states[53] = new State(new int[]{30,54,33,24,34,26,35,28,36,30,37,32,38,34,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50});
    states[54] = new State(-20);
    states[55] = new State(-21);
    states[56] = new State(-39);
    states[57] = new State(-40);
    states[58] = new State(-41);
    states[59] = new State(-42);
    states[60] = new State(new int[]{47,61,33,-22,34,-22,35,-22,36,-22,37,-22,38,-22,39,-22,40,-22,41,-22,42,-22,43,-22,44,-22,45,-22,46,-22,10,-22,30,-22,22,-22});
    states[61] = new State(new int[]{6,62});
    states[62] = new State(new int[]{48,63});
    states[63] = new State(-23);
    states[64] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,65,-13,55});
    states[65] = new State(new int[]{33,-26,34,-26,35,-26,36,-26,37,32,38,34,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50,10,-26,30,-26,22,-26});
    states[66] = new State(new int[]{6,67});
    states[67] = new State(new int[]{48,68});
    states[68] = new State(new int[]{32,69});
    states[69] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,70,-13,55});
    states[70] = new State(new int[]{33,24,34,26,35,28,36,30,37,32,38,34,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50,10,-19});
    states[71] = new State(-8);
    states[72] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,73,-13,55});
    states[73] = new State(new int[]{33,24,34,26,35,28,36,30,37,32,38,34,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50,10,-43});
    states[74] = new State(-9);
    states[75] = new State(new int[]{5,76});
    states[76] = new State(-44);
    states[77] = new State(-10);
    states[78] = new State(new int[]{31,79});
    states[79] = new State(new int[]{5,80});
    states[80] = new State(new int[]{32,81});
    states[81] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,82,-13,55});
    states[82] = new State(new int[]{22,83,33,24,34,26,35,28,36,30,37,32,38,34,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50});
    states[83] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,84,-13,55});
    states[84] = new State(new int[]{30,85,33,24,34,26,35,28,36,30,37,32,38,34,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50});
    states[85] = new State(new int[]{10,86});
    states[86] = new State(new int[]{11,10,5,21,19,72,20,75,21,78,26,92,24,107,23,-46,10,-3},new int[]{-14,87,-3,89,-4,117,-5,9,-6,20,-7,71,-8,74,-9,77,-10,91,-11,106});
    states[87] = new State(new int[]{23,88});
    states[88] = new State(-45);
    states[89] = new State(new int[]{10,90});
    states[90] = new State(new int[]{11,10,5,21,19,72,20,75,21,78,26,92,24,107,23,-47},new int[]{-4,8,-5,9,-6,20,-7,71,-8,74,-9,77,-10,91,-11,106});
    states[91] = new State(-11);
    states[92] = new State(new int[]{31,93});
    states[93] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,94,-13,55});
    states[94] = new State(new int[]{30,95,33,24,34,26,35,28,36,30,37,32,38,34,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50});
    states[95] = new State(new int[]{27,96});
    states[96] = new State(new int[]{10,97});
    states[97] = new State(new int[]{11,10,5,21,19,72,20,75,21,78,26,92,24,107,28,-49,29,-49,10,-3},new int[]{-15,98,-3,118,-4,117,-5,9,-6,20,-7,71,-8,74,-9,77,-10,91,-11,106});
    states[98] = new State(new int[]{28,101,29,-51},new int[]{-16,99});
    states[99] = new State(new int[]{29,100});
    states[100] = new State(-48);
    states[101] = new State(new int[]{10,102});
    states[102] = new State(new int[]{11,10,5,21,19,72,20,75,21,78,26,92,24,107,29,-53,10,-3},new int[]{-17,103,-3,104,-4,117,-5,9,-6,20,-7,71,-8,74,-9,77,-10,91,-11,106});
    states[103] = new State(-52);
    states[104] = new State(new int[]{10,105});
    states[105] = new State(new int[]{11,10,5,21,19,72,20,75,21,78,26,92,24,107,29,-54},new int[]{-4,8,-5,9,-6,20,-7,71,-8,74,-9,77,-10,91,-11,106});
    states[106] = new State(-12);
    states[107] = new State(new int[]{31,108});
    states[108] = new State(new int[]{31,52,9,56,8,57,6,58,7,59,5,60,34,64},new int[]{-12,109,-13,55});
    states[109] = new State(new int[]{30,110,33,24,34,26,35,28,36,30,37,32,38,34,39,36,40,38,41,40,42,42,43,44,44,46,45,48,46,50});
    states[110] = new State(new int[]{25,111});
    states[111] = new State(new int[]{10,112});
    states[112] = new State(new int[]{11,10,5,21,19,72,20,75,21,78,26,92,24,107,23,-56,10,-3},new int[]{-18,113,-3,115,-4,117,-5,9,-6,20,-7,71,-8,74,-9,77,-10,91,-11,106});
    states[113] = new State(new int[]{23,114});
    states[114] = new State(-55);
    states[115] = new State(new int[]{10,116});
    states[116] = new State(new int[]{11,10,5,21,19,72,20,75,21,78,26,92,24,107,23,-57},new int[]{-4,8,-5,9,-6,20,-7,71,-8,74,-9,77,-10,91,-11,106});
    states[117] = new State(-4);
    states[118] = new State(new int[]{10,119});
    states[119] = new State(new int[]{11,10,5,21,19,72,20,75,21,78,26,92,24,107,28,-50,29,-50},new int[]{-4,8,-5,9,-6,20,-7,71,-8,74,-9,77,-10,91,-11,106});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{17,10,-3,10,18});
    rules[3] = new Rule(-3, new int[]{});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-3,10,-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-6});
    rules[8] = new Rule(-4, new int[]{-7});
    rules[9] = new Rule(-4, new int[]{-8});
    rules[10] = new Rule(-4, new int[]{-9});
    rules[11] = new Rule(-4, new int[]{-10});
    rules[12] = new Rule(-4, new int[]{-11});
    rules[13] = new Rule(-5, new int[]{11,5,16,13});
    rules[14] = new Rule(-5, new int[]{11,5,16,15});
    rules[15] = new Rule(-5, new int[]{11,5,16,12});
    rules[16] = new Rule(-5, new int[]{11,5,16,14});
    rules[17] = new Rule(-5, new int[]{11,5,16,13,47,6,48});
    rules[18] = new Rule(-6, new int[]{5,32,-12});
    rules[19] = new Rule(-6, new int[]{5,47,6,48,32,-12});
    rules[20] = new Rule(-12, new int[]{31,-12,30});
    rules[21] = new Rule(-12, new int[]{-13});
    rules[22] = new Rule(-12, new int[]{5});
    rules[23] = new Rule(-12, new int[]{5,47,6,48});
    rules[24] = new Rule(-12, new int[]{-12,33,-12});
    rules[25] = new Rule(-12, new int[]{-12,34,-12});
    rules[26] = new Rule(-12, new int[]{34,-12});
    rules[27] = new Rule(-12, new int[]{-12,35,-12});
    rules[28] = new Rule(-12, new int[]{-12,36,-12});
    rules[29] = new Rule(-12, new int[]{-12,37,-12});
    rules[30] = new Rule(-12, new int[]{-12,38,-12});
    rules[31] = new Rule(-12, new int[]{-12,39,-12});
    rules[32] = new Rule(-12, new int[]{-12,40,-12});
    rules[33] = new Rule(-12, new int[]{-12,41,-12});
    rules[34] = new Rule(-12, new int[]{-12,42,-12});
    rules[35] = new Rule(-12, new int[]{-12,43,-12});
    rules[36] = new Rule(-12, new int[]{-12,44,-12});
    rules[37] = new Rule(-12, new int[]{-12,45,-12});
    rules[38] = new Rule(-12, new int[]{-12,46,-12});
    rules[39] = new Rule(-13, new int[]{9});
    rules[40] = new Rule(-13, new int[]{8});
    rules[41] = new Rule(-13, new int[]{6});
    rules[42] = new Rule(-13, new int[]{7});
    rules[43] = new Rule(-7, new int[]{19,-12});
    rules[44] = new Rule(-8, new int[]{20,5});
    rules[45] = new Rule(-9, new int[]{21,31,5,32,-12,22,-12,30,10,-14,23});
    rules[46] = new Rule(-14, new int[]{});
    rules[47] = new Rule(-14, new int[]{-3,10});
    rules[48] = new Rule(-10, new int[]{26,31,-12,30,27,10,-15,-16,29});
    rules[49] = new Rule(-15, new int[]{});
    rules[50] = new Rule(-15, new int[]{-3,10});
    rules[51] = new Rule(-16, new int[]{});
    rules[52] = new Rule(-16, new int[]{28,10,-17});
    rules[53] = new Rule(-17, new int[]{});
    rules[54] = new Rule(-17, new int[]{-3,10});
    rules[55] = new Rule(-11, new int[]{24,31,-12,30,25,10,-18,23});
    rules[56] = new Rule(-18, new int[]{});
    rules[57] = new Rule(-18, new int[]{-3,10});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> BEGIN, EOL, statementList, EOL, END
{program = ValueStack[ValueStack.Depth-3].statementList;}
        break;
      case 3: // statementList -> /* empty */
{if(CurrentSemanticValue.statementList == null)	{CurrentSemanticValue.statementList = new StatementList();}}
        break;
      case 4: // statementList -> statement
{	if(CurrentSemanticValue.statementList == null)	{CurrentSemanticValue.statementList = new StatementList();}
									CurrentSemanticValue.statementList.InsertFront(ValueStack[ValueStack.Depth-1].statement);
									
								}
        break;
      case 5: // statementList -> statementList, EOL, statement
{ ValueStack[ValueStack.Depth-3].statementList.Add(ValueStack[ValueStack.Depth-1].statement); CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-3].statementList; }
        break;
      case 6: // statement -> varDecl
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 7: // statement -> assignOp
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 8: // statement -> printOp
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 9: // statement -> inputOp
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 10: // statement -> forLoop
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 11: // statement -> ifCond
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 12: // statement -> whileLoop
{ CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
        break;
      case 13: // varDecl -> DIM, IDENTIFIER, AS, INT
{int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, SimpleScriptTypes.Integer); CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
        break;
      case 14: // varDecl -> DIM, IDENTIFIER, AS, DOUBLE
{int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, SimpleScriptTypes.Double);  CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
        break;
      case 15: // varDecl -> DIM, IDENTIFIER, AS, BOOL
{int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, SimpleScriptTypes.Boolean); CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
        break;
      case 16: // varDecl -> DIM, IDENTIFIER, AS, STRING
{int yId = symTable.Add(ValueStack[ValueStack.Depth-3].String); symTable.SetType(yId, SimpleScriptTypes.String);  CurrentSemanticValue.statement = new VriableDeclStatement(yId);}
        break;
      case 17: // varDecl -> DIM, IDENTIFIER, AS, INT, LeftBracket, INTEGER_LITERAL, RightBracket
{Console.WriteLine("Array!! size{0}",ValueStack[ValueStack.Depth-2].Integer);int yId = symTable.Add(ValueStack[ValueStack.Depth-6].String); symTable.SetType(yId, SimpleScriptTypes.IntegerArray,ValueStack[ValueStack.Depth-2].Integer);  CurrentSemanticValue.statement = new VriableDeclStatement(yId,ValueStack[ValueStack.Depth-2].Integer);}
        break;
      case 18: // assignOp -> IDENTIFIER, OP_ASSIGN, Expr
{CurrentSemanticValue.statement = new AssignmentStatement(symTable.GetID(ValueStack[ValueStack.Depth-3].String), ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 19: // assignOp -> IDENTIFIER, LeftBracket, INTEGER_LITERAL, RightBracket, OP_ASSIGN, 
               //             Expr
{Console.WriteLine("Array!! OP_ASSIGN");CurrentSemanticValue.statement = new AssignmentStatement(symTable.GetID(ValueStack[ValueStack.Depth-6].String), ValueStack[ValueStack.Depth-4].Integer, ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 20: // Expr -> OP_LEFT_PAR, Expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-2].expr; }
        break;
      case 21: // Expr -> Literal
{ CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
        break;
      case 22: // Expr -> IDENTIFIER
{ CurrentSemanticValue.expr = new Expression(symTable.Get(ValueStack[ValueStack.Depth-1].String));}
        break;
      case 23: // Expr -> IDENTIFIER, LeftBracket, INTEGER_LITERAL, RightBracket
{ Console.WriteLine("read Array {0}!! index {1}",ValueStack[ValueStack.Depth-4].String,ValueStack[ValueStack.Depth-2].Integer);CurrentSemanticValue.expr= new Expression(symTable.Get(ValueStack[ValueStack.Depth-4].String),ValueStack[ValueStack.Depth-2].Integer); }
        break;
      case 24: // Expr -> Expr, OP_ADD, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Add,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 25: // Expr -> Expr, OP_MINUS, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Sub,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 26: // Expr -> OP_MINUS, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.UnaryMinus,null,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 27: // Expr -> Expr, OP_MUL, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Mul,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 28: // Expr -> Expr, OP_DIV, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Div,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 29: // Expr -> Expr, OP_MODUL, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Modul,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 30: // Expr -> Expr, OP_AND, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.And,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 31: // Expr -> Expr, OP_OR, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Or,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 32: // Expr -> Expr, OP_NOT, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Not,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 33: // Expr -> Expr, OP_EQU, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Equ,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 34: // Expr -> Expr, OP_NOT_EQU, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.NotEqu,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 35: // Expr -> Expr, OP_LT, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Lt,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 36: // Expr -> Expr, OP_GT, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.Gt,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 37: // Expr -> Expr, OP_GT_EQ, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.GtEq,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 38: // Expr -> Expr, OP_LT_EQ, Expr
{ CurrentSemanticValue.expr = new Expression(Operation.LtEq,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 39: // Literal -> STRING_LITERAL
{CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].String);}
        break;
      case 40: // Literal -> BOOL_LITERAL
{CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].Bool);}
        break;
      case 41: // Literal -> INTEGER_LITERAL
{CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].Integer);}
        break;
      case 42: // Literal -> DOUBLE_LITERAL
{CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].Double);}
        break;
      case 43: // printOp -> PRINT, Expr
{CurrentSemanticValue.statement = new PrintStatement(ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 44: // inputOp -> INPUT, IDENTIFIER
{CurrentSemanticValue.statement = new InputStatement(symTable.GetID(ValueStack[ValueStack.Depth-1].String));}
        break;
      case 45: // forLoop -> FOR, OP_LEFT_PAR, IDENTIFIER, OP_ASSIGN, Expr, TO, Expr, 
               //            OP_RIGHT_PAR, EOL, forBody, NEXT
{CurrentSemanticValue.statement = new ForStatement(symTable.Get(ValueStack[ValueStack.Depth-9].String) as SymbolTableIntegerElement, ValueStack[ValueStack.Depth-7].expr, ValueStack[ValueStack.Depth-5].expr, ValueStack[ValueStack.Depth-2].statementList);}
        break;
      case 46: // forBody -> /* empty */
{CurrentSemanticValue.statementList = new StatementList();}
        break;
      case 47: // forBody -> statementList, EOL
{CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList;}
        break;
      case 48: // ifCond -> IF, OP_LEFT_PAR, Expr, OP_RIGHT_PAR, THEN, EOL, ifBody, else, FI
{CurrentSemanticValue.statement = new IfCondStatement(ValueStack[ValueStack.Depth-7].expr,ValueStack[ValueStack.Depth-3].statementList,ValueStack[ValueStack.Depth-2].statementList);}
        break;
      case 49: // ifBody -> /* empty */
{CurrentSemanticValue.statementList = new StatementList();}
        break;
      case 50: // ifBody -> statementList, EOL
{CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList;}
        break;
      case 51: // else -> /* empty */
{CurrentSemanticValue.statementList = new StatementList();}
        break;
      case 52: // else -> ELSE, EOL, elseBody
{CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-1].statementList;}
        break;
      case 53: // elseBody -> /* empty */
{CurrentSemanticValue.statementList = new StatementList();}
        break;
      case 54: // elseBody -> statementList, EOL
{CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList;}
        break;
      case 55: // whileLoop -> WHILE, OP_LEFT_PAR, Expr, OP_RIGHT_PAR, DO, EOL, whileBody, NEXT
{CurrentSemanticValue.statement = new WhileLoopStatement(ValueStack[ValueStack.Depth-6].expr,ValueStack[ValueStack.Depth-2].statementList);}
        break;
      case 56: // whileBody -> /* empty */
{CurrentSemanticValue.statementList = new StatementList();}
        break;
      case 57: // whileBody -> statementList, EOL
{CurrentSemanticValue.statementList = ValueStack[ValueStack.Depth-2].statementList;}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) { }
}
}
